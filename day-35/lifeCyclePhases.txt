Lifecylce Phases:
==================
Any component in react may enter into a max of 3 phases 

They are: 
1. Mounting Phase
2. Updating Phase
3. Unmounting Phase

const App=()=>{
    return <div>Sachin</div>
}

loading - <App /> - first time load on browser also called as mounting phase

Sachin to dhoni

After first time load - if the component is rerendered again due to state variable updation or something then it is called updating phase.

unloading - when we donot want the component anymore, we will delete the component. this is called Unmounting Phase.

UseCase 1: 
    want execute 100 lines of code, before rendering content 
    inside the browser on first time load.

Ans : wirte those 100 lines, inside the component before the return statement.

const App=()=>{
 console.log("100 lines")
 return <div>Sachin</div>
}

<App />


useEffect is a functional hook present in React Library.

React.useEffect is an asynchronous action which returns the result in the form of callback

useEffect takes a max of 2 parameters and min 1 parameter is mandatory 

1st parameter is callback functional
2nd parameter is dependency which tells when to execute the useEffect hook

React.useEffect((a,b)=>{
    console.log("called", a, b);
 },)

 o/p: called undefined undefined

useEffect calls the callback function directly and while calling it won't pass any parameters to callback function.


UseCase 2:
    want execute 100 lines of code, after rendering content 
    inside the browser at first time load and not for every new data updation.

const App=()=>{
 
 React.useEffect(()=>{
    console.log("100 lines code");
 },[]) // empty array dependency parameter is passed.

 return <div>Sachin</div>
}

<App />


UseCase 3:
    want execute 100 lines of code, after rendering content 
    inside the browser first time load and for every new data rendering

const App=()=>{
 
 React.useEffect(()=>{
    console.log("100 lines code");
 })  // no dependency paramter is passed
 return <div>Sachin</div>
}

<App />

UseCase 4:
     want execute 100 lines of code, after render content
    inside the browser first time load and for cnt change

const App=({runs})=>{
 const [cnt, setCnt] = React.useState(0)
 const [name, setName] = React.useState("Sachin")
 React.useEffect(()=>{
    console.log("100 lines code");
 },[cnt]) 
 return <div>Sachin</div>
}

<App />


========================
useEffect(()=>{

})// callback called 1st time load and every change(state,props,context,redux)
use

useEffect(()=>{

},[])//callback called by useEffect only first time after rendering the content inisde the browser

useEffect(()=>{

},[cnt])// callback called by useEffect firt time load after rendering the content and for every cnt change

useEffect(()=>{

},[cnt,name])// callback called by useEffect firt time load after rendering the content and for every cnt,name change



useEffect- We can handle life cycle phase


Mounting - loading

Updating

Unmounting

useEffect(()=>{

})

a. first time load after rendering the content
b. for every data changes after first time load

useEffect(()=>{

},[])

a. only for first time load after rendering the content

useEffect(()=>{

},[cnt])

a. first time load after rendering the content
b. for every cnt change after first time load

useEffect(()=>{

},[cnt,name])

a. first time load after rendering the content
b. for every cnt,name change after first time load


case : 100 lines - I donot want to execute on first time load,only for cnt changes want to execute

const App=()=>{
const [cnt,setCnt]=React.useState(0)

 React.useEffect(()=>{
    if(cnt!==0){
     console.log("100 lines")
       }
 },[cnt])

 
 return <div>
    <h3>{cnt}</h3>
    <button onClick={()=>setCnt(cnt+1)}></button>
 </div>
}

case : cnt related 50 lines - I want to execute cnt change
name related 50 line - I wnat to execute name change

const App=()=>{
const [cnt,setCnt]=React.useState(0)
const [name,setName]=React.useState("sachin")
 const isFirstTimeLoadRef=React.useRef(true)
   React.useEffect(()=>{
    if(cnt!==0){
     console.log("50 lines cnt related")
       }
 },[cnt])

 React.useEffect(()=>{
       if(isFirstTimeLoadRef.current){
         isFirstTimeLoadRef.current=false;
         return;
       }
    console.log("50 lines name related")
    },[name])

 
 return <div>
    <h3>{cnt}</h3>
    <button onClick={()=>setCnt(cnt+1)}></button>
       <h3>{name}</h3>
    <button onClick={()=>setName(name==="sachin" ? "dhoni" : "sachin")}></button>

 </div>
}

case : 100 lines of code want to execute just before unmount A component

cosnt A=()=>{
  React.useEffect(()=>{
    return ()=>{
       console.log("100 lines");
       }
  },[])
  return <h1>A</h1>
}

const App=()=>{
 const [isRender,setIsRender]=React.useState(true)
 return <div>
    <h1>App</h1>
       {isRender && <A />}
       <button onClick={()=>setIsRender(false)}>unmoutn A </button>
 </div>
}

render(<App />)

App
A


